 PSAM1B: PROC OPTIONS(MAIN);
   /****************************************************************
   * PROGRAM:  PSAM1B
   *
   * AUTHOR :  Doug Stout
   *           IBM PD TOOLS
   *
   * READS A FILE AND WRITES A REPORT
   * PROCESSING IS CONTROLLED BY A TRANSACTION FILE
   *
   * THIS EXAMPLE APPLICATION IS A TEACHING AID.  INTENDED USES ARE:
   *   FOR DEBUG TOOL WORKSHOP:
   *      - DETERMINE WHY THE MAX VALUE IS INCORRECT IN THE REPORT
   *      - INTERCEPT THE ABEND THAT CAN OCCUR IN SUBROUTINE PSAM2
   *   FOR FAULT ANALYZER WORKSHOP:
   *      - DETERMINE WHY THE PSAM2 PROGRAM ABENDS IN SOME CASES
   *   FOR APPLICATION PERFORMANCE ANALYZER WORKSHOP:
   *      - DETERMINE WHERE THE PROGRAM IS SPENDING THE MOST TIME
   ****************************************************************
   *
   * Transaction file record descriptions:
   *     0    1    1    2    2    3    3    4    4    5    5    6    6
   * ....5....0....5....0....5....0....5....0....5....0....5....0....5
   * *        <== an asterisk in first column is a comment
   * PRINT    <== produces a detail report
   * TOTALS   <== produces a summary report
   * ABEND    <== force a divide by zero abend
   *
   ****************************************************************/

   DCL DUMP_FINDER CHAR(30) INIT('*STORAGE FOR PROGRAM PSAM1****');
   DCL PSAMEX EXTERNAL ENTRY OPTIONS(FETCHABLE);
   DCL RESULT      BIN;
   DCL  WORKNUM_A  BIN;
   DCL  WORKNUM_B  BIN;

   %INCLUDE PLCU1;

   /**********************/
   /* INPUT/OUTPUT FILES */
   /**********************/

   DCL CUSTFILE FILE INPUT RECORD SEQUENTIAL
   ENV(FB RECSIZE(80) BLKSIZE(0));
   DCL TRANFILE FILE INPUT RECORD SEQUENTIAL BUFFERED;
   DCL CUSTRPT FILE STREAM PRINT;

   /*************************************
   * TRANFILE RECORD                   *
   *************************************/
   DCL 1 TRAN_RECORD,
     2 TRAN_CODE          CHAR(6),
     2 TRAN_FILL3         CHAR(1),
     2 CRUNCH_PARMS,
       3 CRUNCH_IO_LOOPS    PIC '99999',
       3 CRUNCH_FILL1       CHAR(1),
       3 CRUNCH_CPU_LOOPS   PIC '999999999',
     2 CRUNCH_FILL2       CHAR(58);
   DCL TRAN_COMMENT           CHAR(1)    DEFINED TRAN_RECORD;
   DCL TRAN_RECORD_ALL        CHAR(80)   DEFINED TRAN_RECORD;

   %INCLUDE DFHAIDP;
   /***************************************
   * CUSTFILE RECORDS                    *
   ***************************************/

   /* %INCLUDE CUST2PLI; */
   /*   ---------------------------------------------------   *
   *   DESCRIBES FILE <USERID>.ADLAB.FILES(CUST2)            *
   *   ---------------------------------------------------   */
   DCL 1 CUSTFILE_RECORD     CHAR(80);
   DCL 1 CUSTOMER_RECORD  BASED(ADDR(CUSTFILE_RECORD)),
     2 CUSTOMER_KEY,
       3 CUST_ID          CHAR(5),
       3 CUST_RECORD_TYPE CHAR(1),
       3 KEY_FILL         CHAR(7),
     2 CUST_NAME          CHAR(17),
     2 ACCT_BALANCE       FIXED DEC (9,2) UNALIGNED,
     2 ORDERS_YTD         FIXED BINARY(15,0) UNALIGNED,
     2 CITY               CHAR(15),
     2 OCCUPATION         CHAR(28);
   DCL 1 PRODUCT_RECORD   BASED(ADDR(CUSTFILE_RECORD)),
     2 PRODUCT_KEY,
       3 PR_CUST_ID       CHAR(5),
       3 PR_RECORD_TYPE   CHAR(1),
       3 PRODUCT_ID       CHAR(7),
     2 PRODUCT_NAME       CHAR(25),
     2 DATE_PURCHASED     CHAR(10),
     2 SERVICE_CALLS      FIXED BINARY(15,0) UNALIGNED,
     2 LAST_SERVICE_CALL  CHAR(10),
     2 RECORD_FILL        CHAR(20);

   /********************
   * PROGRAM FLAGS    *
   ********************/

   DCL  TRANFILE_EOF BIT(1) INIT ('0'B);
   DCL  CUSTFILE_EOF BIT(1) INIT ('0'B);
   DCL  TRAN_OK_FLAG BIT(1) INIT ('1'B);

   %INCLUDE EPSP1MP;
   /********************
   * GENERAL DECLARES *
   ********************/
   DCL 1 SYSTEM_DATE_AND_TIME,
     2 CURRENT_DATE,
       3 CURRENT_YEAR            PIC '9999',
       3 CURRENT_MONTH           PIC '99',
       3 CURRENT_DAY             PIC '99',
     2 CURRENT_TIME,
       3 CURRENT_HOUR            PIC '99',
       3 CURRENT_MINUTE          PIC '99',
       3 CURRENT_SECOND          PIC '99',
       3 CURRENT_MILLISEC        PIC '999';

   DCL NUM_TRANFILE_RECS     BIN FIXED(15) INIT(0);
   DCL NUM_TRAN_ERRORS       BIN FIXED(15) INIT(0);
   DCL NUM_TRANSACTIONS      BIN FIXED(15) INIT(0);
   DCL NUM_CUSTFILE_RECS     BIN FIXED(15) INIT(0);
   DCL NUM_CUSTOMER_RECS     BIN FIXED(15) INIT(0);
   DCL NUM_PRODUCT_RECS      BIN FIXED(15) INIT(0);
   DCL NUM_DETAIL_LINES      BIN FIXED(15) INIT(0);
   DCL NUM_PRINT_REQUESTS    BIN FIXED(15) INIT(0);
   DCL NUM_PRINT_COMPLETED   BIN FIXED(15) INIT(0);
   DCL NUM_TOTALS_REQUESTS   BIN FIXED(15) INIT(0);
   DCL NUM_TOTALS_COMPLETED  BIN FIXED(15) INIT(0);
   DCL NUM_ABEND_REQUESTS    BIN FIXED(15) INIT(0);
   DCL NUM_ABEND_COMPLETED   BIN FIXED(15) INIT(0);
   DCL NUM_CRUNCH_REQUESTS   BIN FIXED(15) INIT(0);
   DCL NUM_CRUNCH_COMPLETED  BIN FIXED(15) INIT(0);

   DCL PROGRAM_STATUS        CHAR(30);

   DCL 1 CUSTOMER_BALANCE_STATS,
     2 BALANCE_COUNT     DEC(8)    INIT(0),
     2 BALANCE_TOTAL     DEC(12,2) INIT(0),
     2 BALANCE_MIN       DEC(12,2) INIT(0),
     2 BALANCE_MAX       DEC(12,2) INIT(0),
     2 BALANCE_RANGE     DEC(12,2) INIT(0),
     2 BALANCE_AVG       DEC(12,2) INIT(0),
     2 BALANCE_FIRST_TIME_SW     PIC '9'  INIT(1);

   DCL 1 PRODUCT_STATS,
     2 RECORD_COUNT      DEC(8),
     2 SERV_CALLS_TOTAL  DEC(12,2),
     2 SERV_CALLS_MIN    DEC(12,2),
     2 SERV_CALLS_MAX    DEC(12,2),
     2 SERV_CALLS_RANGE  DEC(12,2),
     2 SERV_CALLS_AVG    DEC(12,2),
     2 PRODUCT_FIRST_TIME_SW     PIC '9'  INIT(1);

   DCL PSAM2 EXTERNAL ENTRY;
   DCL PSAM3 EXTERNAL ENTRY;
   DCL EPSBDP2 EXTERNAL ENTRY;

   /************************************
   * REPORT LINES, TEXT, AND FORMATS  *
   ************************************/

   DCL MSG_BAD_TRAN   CHAR(20) INIT('Transaction Error:  ');
   DCL MSG_OPEN_ERROR CHAR(20) INIT('Error Opening File: ');
   DCL MSG_ONFILE     CHAR(25) INIT('                DD Name: ');
   DCL MSG_ONCODE     CHAR(25) INIT('    File Condition Code: ');
   DCL MSG_ONCONDID   CHAR(25) INIT('           Condition ID: ');
   DCL MSG_ONCONDCOND CHAR(25) INIT('         Condition Name: ');

   DCL 1 HDR1,
     2 HDR1_TEXT1     CHAR(40)
   INIT('SAMPLE CUSTOMER FILE REPORT       DATE: '),
     2 HDR1_FILL     CHAR(40)
   INIT('------ --------------------       -----'),
     2 HDR1_TEXT2     CHAR(20) INIT(' (mm/dd/yyyy) TIME: '),
     2 HDR2_FILL     CHAR(40)
   INIT('  ----------- -----');
   DCL 1 HDR2,
     2 HDR2A CHAR(40) UNALIGNED
   INIT('ID    CUSTOMER NAME     OCCUPATION      '),
     2 HDR2B CHAR(40) UNALIGNED
   INIT('                 BALANCE ORDERS-YTD     ');
   DCL 1 HDR3,
     2 HDR3A CHAR(40) UNALIGNED
   INIT('----- ----------------- ----------------'),
     2 HDR3B CHAR(40) UNALIGNED
   INIT('------------ ----------- ----------     ');

   DCL MSG_TRANREC    CHAR(80);
   DCL MSG_TRAN1      CHAR(12) INIT('TRANSACTION:');
   DCL SPACE          CHAR(1)  INIT(' ');
   DCL SLASH          CHAR(1)  INIT('/');
   DCL COLON          CHAR(1)  INIT(':');

   FMT_MSG1: FORMAT ( A(22),A(4),A(1),A(2),A(1),A(2),A(20) );
   FMT_MSG2: FORMAT ( A(22),A(2),A(1),A(2),A(1),A(2) );
   FMT_CUST1:FORMAT ( SKIP,A(5),X(1),A(17),X(1),A(28),X(2),
   P'ZZZ,ZZ9V.99',X(1),P'ZZ,ZZZ,ZZ9' );
   FMT_TRAN1:FORMAT ( SKIP,X(1),A(12),X(2),A(80) );
   FMT_ERR1: FORMAT ( SKIP(1),A(20),X(5),A(25),A(29) );

   DCL NUMA_7V2        PIC 'ZZZ,ZZ9V.99';
   DCL NUMB_7V2        PIC 'ZZZ,ZZ9V.99';
   DCL NUMC_7V2        PIC 'ZZZ,ZZ9V.99';
   DCL NUMA_11         PIC 'ZZZ,ZZZ,ZZ9';
   DCL NUMB_11         PIC 'ZZZ,ZZZ,ZZ9';
   DCL NUMC_11         PIC 'ZZZ,ZZZ,ZZ9';
   DCL I               BIN;
   %INCLUDE PLCU2PR1;
   /********************************
   * CONDITION HANDLING ROUTINES  *
   ********************************/

   ON ENDFILE (CUSTFILE)
   CUSTFILE_EOF = '1'B;

   ON ENDFILE (TRANFILE)
   TRANFILE_EOF = '1'B;

   ON ENDPAGE (CUSTRPT)
   BALANCE_MAX = 0;
   BEGIN;
     /*  PRINT REPORT HEADINGS  */
     FMT_HDR1: FORMAT ( PAGE,A(40),A(2),A(1),A(2),A(1),A(4),A(20),
     A(2),A(1),A(2),A(1),A(2) );
     PUT FILE(CUSTRPT)
     EDIT(HDR1_TEXT1,
     CURRENT_MONTH, SLASH, CURRENT_DAY, SLASH, CURRENT_YEAR,
     HDR1_TEXT2,
     CURRENT_HOUR, COLON, CURRENT_MINUTE, COLON, CURRENT_SECOND)
     (R(FMT_HDR1));
     IF ( TRAN_CODE = 'PRINT ' ) THEN
       CALL PRTHDG1;
   END;

   ON UNDEFINEDFILE (CUSTFILE)
   CALL UPKSDS;

   ON UNDEFINEDFILE (TRANFILE)
   CALL UPKSDS;

   ON UNDEFINEDFILE (CUSTRPT)
   CALL TRANTOT1;

   ON ERROR
   BEGIN;
     ON ERROR SYSTEM;
     CALL PSAM2;
     PUT DATA;
   END;

   /*****************************************************
   * MAIN PROGRAM ROUTINE                              *
   *****************************************************/

   PROGRAM_STATUS = 'PROGRAM STARTED';
   STRING(SYSTEM_DATE_AND_TIME) = DATETIME();
   PUT PAGE EDIT('PSAM1 Started  Date = ',
   CURRENT_YEAR, SLASH, CURRENT_MONTH, SLASH,
   CURRENT_DAY, '  (yyyy/mm/dd)') (R(FMT_MSG1));
   PUT SKIP EDIT('               Time = ', CURRENT_HOUR, COLON,
   CURRENT_MINUTE, COLON, CURRENT_SECOND) (R(FMT_MSG2));

   PROGRAM_STATUS = 'OPENING FILES  ';
   OPEN FILE (TRANFILE);
   OPEN FILE (CUSTRPT);

   SIGNAL ENDPAGE(CUSTRPT);  /*  Print report Headings  */

   /******************************************************
   * MAIN PROGRAM LOOP TO PROCESS TRANSACTION RECORDS   *
   ******************************************************/
   I = 1;
   TRANFILE_LOOP: DO WHILE (I > 0);

     PROGRAM_STATUS = 'READING TRAN RECORD';
     READ FILE (TRANFILE) INTO (TRAN_RECORD);

     IF ( TRANFILE_EOF ) THEN
       LEAVE TRANFILE_LOOP;    /*  Exit loop at end of Tran file   */
     IF ( TRAN_COMMENT = '*' ) THEN
       GOTO NEXT_TRANFILE_LOOP;  /*  Skip Comment Records            */

     NUM_TRANFILE_RECS   = NUM_TRANFILE_RECS + 1;
     PROGRAM_STATUS = 'WRITING TRAN REPORT';
     PUT FILE (CUSTRPT) SKIP (1) LIST ( SPACE );
     PUT FILE (CUSTRPT) EDIT( MSG_TRAN1, TRAN_RECORD_ALL )
     (R(FMT_TRAN1));
     PUT FILE (CUSTRPT) SKIP (1) LIST ( SPACE );
     TRAN_OK_FLAG = '1'B;

     SELECT ( TRAN_CODE );

     /* 4mat */
         WHEN ('PRINT ') DO;    /* PRINT TRANSACTION */
         PROGRAM_STATUS = 'PRINTING CUSTOMER REPORT';
         NUM_TRANSACTIONS = NUM_TRANSACTIONS + 1;
         NUM_PRINT_REQUESTS = NUM_PRINT_REQUESTS + 1;
         CALL PRTHDG3;
         OPEN FILE (CUSTFILE);
         CUSTFILE_LOOP: DO WHILE (I > 0);
           READ FILE (CUSTFILE) INTO (CUSTFILE_RECORD);
     IF ( CUSTFILE_EOF ) THEN
             LEAVE CUSTFILE_LOOP;    /*  Exit loop at end of file */
     NUM_CUSTFILE_RECS = NUM_CUSTFILE_RECS + 1;
             IF ( TRAN_COMMENT = '2' ) THEN
             GOTO NEXT_TRANFILE_LOOP;
           /*  SUBROUTINE PSAM2 WILL COLLECT STATISTICS */
     IF ( CUSTOMER_RECORD.CUST_RECORD_TYPE = 'C' )  THEN  DO;
               NUM_CUSTOMER_RECS = NUM_CUSTOMER_RECS + 1;
               CUST_REC.CUST_ID = '0000';
          CALL PSAM2 ( CUSTFILE_RECORD,
               CUSTOMER_BALANCE_STATS );
               CALL EPSBDP2;
          PUT FILE (CUSTRPT)
               EDIT(CUSTOMER_RECORD.CUST_ID,
               CUSTOMER_RECORD.CUST_NAME,
               CUSTOMER_RECORD.OCCUPATION,
               CUSTOMER_RECORD.ACCT_BALANCE,
               CUSTOMER_RECORD.ORDERS_YTD) (R(FMT_CUST1));
               NUM_DETAIL_LINES = NUM_DETAIL_LINES + 1;
      END;    /*  IF RECORD_TYPE = 'C'  */
        IF ( PRODUCT_RECORD.PR_RECORD_TYPE = 'R' )  THEN  DO;
               NUM_PRODUCT_RECS = NUM_PRODUCT_RECS + 1;
               CALL PSAM3 ( CUSTFILE_RECORD,
               PRODUCT_STATS );
         END;    /*  IF RECORD_TYPE = 'P'  */
              END CUSTFILE_LOOP;
         NUM_PRINT_COMPLETED  = NUM_PRINT_COMPLETED + 1;
         CLOSE FILE (CUSTFILE);
               END;         /*  when tran_code = 'PRINT '         */
     WHEN ('TOTALS') DO;    /* TOTALS TRANSACTION */
         PROGRAM_STATUS = 'PRINTING TOTALS REPORT';
         NUM_TRANSACTIONS    = NUM_TRANSACTIONS + 1;
         NUM_TOTALS_REQUESTS = NUM_TOTALS_REQUESTS + 1;
         CALL TRANTOT;
         NUM_PRINT_COMPLETED = NUM_PRINT_COMPLETED + 1;
       END;         /*  when tran_code = 'TOTALS'         */
     WHEN ('ABEND ') DO;    /* ABEND TRANSACTION */
         PROGRAM_STATUS = 'PROCESSING ABEND REQUEST';
         NUM_TRANSACTIONS    = NUM_TRANSACTIONS + 1;
         NUM_ABEND_REQUESTS  = NUM_ABEND_REQUESTS + 1;
         CALL TRANABN;
         NUM_ABEND_COMPLETED = NUM_ABEND_COMPLETED + 1;
       END;         /*  when tran_code = 'TOTALS'         */
     OTHERWISE       DO;    /* UNKNOWN TRANSACTION */
         NUM_TRANSACTIONS    = NUM_TRANSACTIONS + 1;
         PUT FILE (CUSTRPT) SKIP (1)
         LIST ('Invalid Transaction Code: ', TRAN_CODE);
         NUM_TRAN_ERRORS = NUM_TRAN_ERRORS + 1;
       END;
     END;         /*  SELECT TRAN_CODE                  */
   NEXT_TRANFILE_LOOP:
   END TRANFILE_LOOP;

   TRANABN: PROCEDURE;
     BALANCE_MAX = BALANCE_MAX+1;
     RESULT = 999;
     WORKNUM_A = 100;
     WORKNUM_B = 0;
     RESULT = WORKNUM_A / WORKNUM_B;    /* This could be a problem */
     NUM_ABEND_COMPLETED = NUM_ABEND_COMPLETED + 1;
     PUT FILE (CUSTRPT) SKIP (1) LIST ( SPACE );
     PUT FILE (CUSTRPT) SKIP (1)
     LIST (' ABEND TRANSACTION PROCESSED.');
   END TRANABN;

   TRANTOT: PROCEDURE;
     DCL NUM_P02  CHAR(2);
     FMT_TOT1: FORMAT ( SKIP,X(2),A(15),X(4),A(11),A(11),
     X(3),A(11),A(11),X(3),A(11),A(11) );
     PUT FILE (CUSTRPT) SKIP (1) LIST ( SPACE );
     PUT FILE (CUSTRPT) SKIP (1) LIST ('TOTALS REPORT');
     PUT FILE (CUSTRPT) SKIP (1) LIST ((99)'-');
     IF ( NUM_PRINT_COMPLETED > 0 ) THEN DO;
         NUMA_7V2 = BALANCE_TOTAL;
         NUMB_7V2 = BALANCE_MAX;
         NUMC_7V2 = BALANCE_AVG;
         PUT FILE (CUSTRPT)
         EDIT ('Acct Balance:',
         '     Total:', NUMA_7V2,
         '       Max:', NUMB_7V2,
         '   Average:', NUMC_7V2 )
         (R(FMT_TOT1));
         NUMA_11 = NUM_CUSTFILE_RECS;
         NUMB_11 = NUM_CUSTOMER_RECS;
         IF ( TRAN_COMMENT = '2' ) THEN
           GOTO TRANTOT;
         PUT FILE (CUSTRPT)
         EDIT ('Record Counts:',
         ' All Types:', NUMA_11,
         ' Cust Recs:', NUMB_11 )
         (R(FMT_TOT1));
         NUMA_11 = NUM_TRANSACTIONS;
         NUMB_11 = NUM_TRANSACTIONS - NUM_TRAN_ERRORS;
         NUMC_11 = NUM_TRAN_ERRORS;
         PUT FILE (CUSTRPT)
         EDIT ('Transactions:',
         '     Count:', NUMA_11,
         '     Count:', NUM_P02,
         ' Processed:', NUMB_11,
         '    Errors:', NUMC_11 )
         (R(FMT_TOT1));
         /* Matching Parens */
         NUM_TOTALS_COMPLETED = ( NUM_TOTALS_COMPLETED + 1
         * ( RESULT + NUMA_11 / ( ( NUMB_11 * 1.2) )
         + NUM_P02 / 3.14 ) );
         CALL TRANTOT1;
       END;     /*  if num_work_completed > 0   */
     ELSE DO;
         PUT FILE (CUSTRPT) SKIP (1)
         LIST ('Cannot complete TOTALS Tran. ',
         'A PRINT tran must be requested/processed first.');
         NUM_TRAN_ERRORS = NUM_TRAN_ERRORS + 1;
       END;
   END TRANTOT;

   (ZERODIVIDE):
   EXCEP:PROC OPTIONS(MAIN) REORDER;
     DCL NUM_PAID CHAR(2);
     ON ZERODIVIDE BEGIN;
       PUT SKIP LIST('DAVE MYERS');
     END;
     PUT SKIP LIST('NUM_PURCHASE',1/0);
     PUT SKIP LIST('LAST LINE');
   END;

   EXCEP:PROC OPTIONS(MAIN) REORDER;
     DCL NUM_P0234 CHAR(2);
     ON ZERODIVIDE BEGIN;
       PUT SKIP LIST('VERONIQUE');
     END;
     (ZERODIVIDE):PUT SKIP LIST('NUM_PATTERN',1/0);
     PUT SKIP LIST('LAST LINE');
   END;

   EXCEP:PROC OPTIONS(MAIN) REORDER;
     ON ZERODIVIDE BEGIN;
       PUT SKIP LIST('SIMON ERROR');
       DCL NUM_P23409 CHAR(2);
       GO TO E1;
     END;
     (ZERODIVIDE):PUT SKIP LIST('ZERODIV',1/0);
     E1:PUT SKIP LIST('LAST LINE');
   END;

   EXCEP:PROC OPTIONS(MAIN) REORDER;
     DCL NUM_P02 CHAR(2);
     ON SIZE BEGIN;
       PUT SKIP LIST(NUM_P02);
       GO TO E1;
     END;
     DCL VAR1 FIXED DEC(7,2);
     DCL VAR2 FIXED DEC(10,2) INIT(22222222.22);
     (SIZE):VAR1=VAR2;
     E1:PUT SKIP LIST('LAST LINE');
   END;

   UPKSDS:PROC OPTIONS(MAIN) REORDER;
     %INCLUDE PLCU1;

     DCL INFILE FILE RECORD INPUT DIRECT KEYED ENV(VSAM);
     DCL 01 INREC,
       05 EID PIC'(4)9',
       05 FILLER1 CHAR(1) INIT(' '),
       05 ENAME CHAR(11),
       05 DESIG CHAR(10),
       05 DAT CHAR(15),
       05 SAL PIC'(4)9',
       05 FILLER2 CHAR(10) INIT(' '),
       05 DEPTNO PIC'99',
       05 FILLER3 CHAR(23) INIT(' ');
     DCL ONCODE BUILTIN;
     ON KEY(INFILE) BEGIN;
       IF ONCODE=51 THEN
         PUT SKIP LIST('CHRIS');
     END;
     OPEN FILE(INFILE);
     READ FILE(INFILE) INTO(INREC) KEY('4343');
     PUT SKIP LIST('SAM');
     CLOSE FILE(INFILE);
   END UPKSDS;

   TRANTOT1: PROCEDURE;
     FMT_TOT1: FORMAT ( SKIP,X(2),A(15),X(4),A(11),A(11),
     X(3),A(11),A(11),X(3),A(11),A(11) );
     PUT FILE (CUSTRPT) SKIP (1) LIST ( SPACE );
     PUT FILE (CUSTRPT) SKIP (1) LIST ('TOTALS REPORT');
     PUT FILE (CUSTRPT) SKIP (1) LIST ((99)'-');
     IF ( NUM_PRINT_COMPLETED > 0 ) THEN DO;
         NUMA_7V2 = BALANCE_TOTAL;
         NUMB_7V2 = BALANCE_MAX;
         NUMC_7V2 = BALANCE_AVG;
         PUT FILE (CUSTRPT)
         EDIT ('Acct Balance:',
         '     Total:', NUMA_7V2,
         '       Max:', NUMB_7V2,
         '   Average:', NUMC_7V2 )
         (R(FMT_TOT1));
         NUMA_11 = NUM_CUSTFILE_RECS;
         NUMB_11 = NUM_CUSTOMER_RECS;
         PUT FILE (CUSTRPT)
         EDIT ('Record Counts:',
         ' All Types:', NUMA_11,
         ' Cust Recs:', NUMB_11 )
         (R(FMT_TOT1));
         NUMA_11 = NUM_TRANSACTIONS;
         NUMB_11 = NUM_TRANSACTIONS - NUM_TRAN_ERRORS;
         NUMC_11 = NUM_TRAN_ERRORS;
         PUT FILE (CUSTRPT)
         EDIT ('Transactions:',
         '     Count:', NUMA_11,
         ' Processed:', NUMB_11,
         '    Errors:', NUMC_11 )
         (R(FMT_TOT1));
         NUM_TOTALS_COMPLETED = NUM_TOTALS_COMPLETED + 1;
       END;     /*  if num_work_completed > 0   */
     ELSE DO;
         PUT FILE (CUSTRPT) SKIP (1)
         LIST ('Cannot complete TOTALS Tran. ',
         'A PRINT tran must be requested/processed first.');
         NUM_TRAN_ERRORS = NUM_TRAN_ERRORS + 1;
       END;
     CALL TRANTOT2;
     CALL PRTHDG2;
   END TRANTOT1;

   TRANTOT2: PROCEDURE;
     BALANCE_MAX = BALANCE_MAX+1;
     FMT_TOT1: FORMAT ( SKIP,X(2),A(15),X(4),A(11),A(11),
     X(3),A(11),A(11),X(3),A(11),A(11) );
     PUT FILE (CUSTRPT) SKIP (1) LIST ( SPACE );
     PUT FILE (CUSTRPT) SKIP (1) LIST ('TOTALS REPORT');
     PUT FILE (CUSTRPT) SKIP (1) LIST ((99)'-');
     IF ( NUM_PRINT_COMPLETED > 0 ) THEN DO;
         NUMA_7V2 = BALANCE_TOTAL;
         NUMB_7V2 = BALANCE_MAX;
         NUMC_7V2 = BALANCE_AVG;
         PUT FILE (CUSTRPT)
         EDIT ('Acct Balance:',
         '     Total:', NUMA_7V2,
         '       Max:', NUMB_7V2,
         '   Average:', NUMC_7V2 )
         (R(FMT_TOT1));
         NUMA_11 = NUM_CUSTFILE_RECS;
         NUMB_11 = NUM_CUSTOMER_RECS;
         PUT FILE (CUSTRPT)
         EDIT ('Record Counts:',
         ' All Types:', NUMA_11,
         ' Cust Recs:', NUMB_11 )
         (R(FMT_TOT1));
         NUMA_11 = NUM_TRANSACTIONS;
         NUMB_11 = NUM_TRANSACTIONS - NUM_TRAN_ERRORS;
         NUMC_11 = NUM_TRAN_ERRORS;
         PUT FILE (CUSTRPT)
         EDIT ('Transactions:',
         '     Count:', NUMA_11,
         ' Processed:', NUMB_11,
         '    Errors:', NUMC_11 )
         (R(FMT_TOT1));
         NUM_TOTALS_COMPLETED = NUM_TOTALS_COMPLETED + 1;
       END;     /*  if num_work_completed > 0   */
     ELSE DO;
         PUT FILE (CUSTRPT) SKIP (1)
         LIST ('Cannot complete TOTALS Tran. ',
         'A PRINT tran must be requested/processed first.');
         NUM_TRAN_ERRORS = NUM_TRAN_ERRORS + 1;
       END;
   END TRANTOT2;

   PRTHDG1: PROCEDURE;
     PUT FILE (CUSTRPT) SKIP (1) LIST (STRING(HDR1));
     PUT FILE (CUSTRPT) SKIP (1) LIST (STRING(HDR2));
     PUT FILE (CUSTRPT) SKIP (1) LIST (STRING(HDR3));
   END PRTHDG1;
   PRTHDG2: PROCEDURE;
     PUT FILE (CUSTRPT) SKIP (1) LIST (STRING(HDR2));
     PUT FILE (CUSTRPT) SKIP (1) LIST (STRING(HDR3));
     CALL PRTHDG3;
   END PRTHDG2;
   PRTHDG3: PROCEDURE;
     PUT FILE (CUSTRPT) SKIP (1) LIST (STRING(HDR3));
     CALL PRTHDG3;
     CALL UPKSDS;
     CALL PSAMEX;
   END PRTHDG3;
   PRTHDG4: PROCEDURE;
     PUT FILE (CUSTRPT) SKIP (1) LIST (STRING(HDR1));
     PUT FILE (CUSTRPT) SKIP (1) LIST (STRING(HDR2));
     PUT FILE (CUSTRPT) SKIP (1) LIST (STRING(HDR2));
     CALL TRANABN;
   END PRTHDG4;

   PLISUDS: PROC OPTIONS(MAIN);
     DCL LOOP            FIXED(4,0);

     DO LOOP = 100 TO 0 BY -1;
       /*  Bottles = Loop; */
       SELECT;
       WHEN ((2 < LOOP) & ( LOOP <=100)) BEGIN;
           PUT SKIP LIST (
           TRIM( EDIT(LOOP, '(3)Z9' ) )
           || " bottles of beer on the wall. "
           || TRIM( EDIT(LOOP, '(3)Z9' ) )
           || " bottles of beer.");
           PUT SKIP LIST (
           "Take one down and pass it around, "
           || TRIM( EDIT(LOOP-1, '(3)Z9' ) )
           || " bottles of beer on the wall.");
         END;
       WHEN (LOOP = 2) BEGIN;
           PUT SKIP LIST (
           TRIM( EDIT(LOOP, '(3)Z9' ) )
           || " bottles of beer on the wall. "
           || TRIM( EDIT(LOOP, '(3)Z9' ) )
           || " bottles of beer.");
           PUT SKIP LIST (
           "Take one down and pass it around, "
           || TRIM( EDIT(LOOP-1, '(3)Z9' ) )
           || " bottle of beer on the wall.");
         END;
       WHEN (LOOP = 1) BEGIN;
           PUT SKIP LIST (
           "One bottle of beer on the wall. "
           || "One bottle of beer.");
           PUT SKIP LIST (
           "Take one down and pass it around, "
           ||"no bottles of beer on the wall.");
         END;
       WHEN (LOOP = 0) BEGIN;
           PUT SKIP LIST (
           "No bottles of beer on the wall. "
           ||"No bottles of beer.");
           PUT SKIP LIST (
           "Go to the store and buy some more. "
           ||"No bottles of beer on the wall.");
         END;
       OTHERWISE ;
       END;
     END;

     PUT SKIP LIST("Time to go.");

   END PLISUDS;
   /*
   UDFILEM: PROCEDURE;
   PUT SKIP (1) LIST ( SPACE );
   PUT EDIT(MSG_OPEN_ERROR, MSG_ONFILE, ONFILE()) (R(FMT_ERR1));
   PUT EDIT(SPACE, MSG_ONCODE, ONCODE()) (R(FMT_ERR1));
   PUT EDIT(SPACE, MSG_ONCONDID, ONCONDID()) (R(FMT_ERR1));
   PUT EDIT(SPACE, MSG_ONCONDCOND, ONCONDCOND()) (R(FMT_ERR1));
   SIGNAL ERROR;
   END UDFILEM;
   */

   PROGRAM_STATUS = 'PROGRAM ENDING';

//* A sample program which updates the salaries for those employees   */
//* whose current commission total is greater than or equal to the    */
//* value of COMMISSION. The salaries of those who qualify are        */
//* increased by the value of PERCENTAGE, retroactive to RAISE_DATE.  */
 /* A report is generated showing the projects which these employees  */
 /* have contributed to, ordered by project number and employee ID.   */
 /* A second report shows each project having an end date occurring   */
 /* after RAISE_DATE (i.e. is potentially affected by the retroactive */
 /* raises) with its total salary expenses and a count of employees   */
 /* who contributed to the project.                                   */
 /*********************************************************************/


   PLIEX: PROC;
     %INCLUDE TRANRECP;

     DCL RAISE_DATE CHAR(10);
     DCL WORK_DAYS  FIXED BIN(15);
     DCL COMMISSION FIXED DECIMAL(8,2);
     DCL PERCENTAGE FIXED DECIMAL(5,2);

     /* File declaration for sysprint */
     DCL SYSPRINT FILE EXTERNAL OUTPUT STREAM PRINT;

     /* Structure for report 1 */
     DCL 1 RPT1,
       15 EMPNO     CHAR(6),
       15 NAME      CHAR(30),
       15 SALARY    FIXED DECIMAL(8,2);

     /* Structure for report 2 */
     DCL 1 RPT2,
       15 PROJNO          CHAR(6),
       15 PROJECT_NAME    CHAR(36),
       15 EMPLOYEE_COUNT  FIXED BIN(15),
       15 TOTL_PROJ_COST  FIXED DECIMAL(10,2);

     DCL WORK_NUM CHAR(50);
     DCL NUM_PAIRING CHAR(50);
     %INCLUDE SQLCAP;

     COMMISSION = 2000.00;
     PERCENTAGE = 1.04;
     RAISE_DATE = '1982-06-01';
     WORK_DAYS  = 253;
     WORK_NUM  = NUM_PAIRING;
     OPEN FILE(SYSPRINT);

    /* Update the selected employee's salaries by the new percentage. */
    /* If an error occurs during the update, ROLLBACK the changes.    */
     EXEC SQL WHENEVER SQLERROR GO TO UPDATE_ERROR;
     EXEC SQL
       UPDATE EMPLOYEE
       SET SALARY = SALARY * :PERCENTAGE
       WHERE COMM >= :COMMISSION ;

     /* Commit changes */
     EXEC SQL
       COMMIT;
     EXEC SQL WHENEVER SQLERROR GO TO REPORT_ERROR;


   /* Report the updated statistics for each project supported by one */
   /* of the selected employees.                                      */

     /* Write out the header for Report 1 */
     PUT FILE(SYSPRINT)
     EDIT('REPORT OF PROJECTS AFFECTED BY EMPLOYEE RAISES')
     (COL(22),A);
     PUT FILE(SYSPRINT)
     EDIT('NUM_PAIRING','EMPID','EMPLOYEE NAME','SALARY')
     (SKIP(2),COL(1),A,COL(10),A,COL(20),A,COL(55),A);

     CALL PRTHDG1;
     CALL TRANABN;
     CALL TRANTOT2;
     BALANCE_MAX = BALANCE_MAX+1;
     EXEC SQL
       DECLARE C1 CURSOR FOR
       SELECT DISTINCT PROJNO, EP.EMPNO,
       LASTNAME||', '||FIRSTNME, SALARY
       FROM ADMINISTRATOR.EMPPROJACT EP, ADMINISTRATOR.EMPLOYEE EM
       WHERE EP.EMPNO = EM.EMPNO AND
       COMM >= :COMMISSION
       ORDER BY PROJNO, EMPNO;
     EXEC SQL
       OPEN C1;

     /* Fetch and write the rows to SYSPRINT */
     EXEC SQL WHENEVER NOT FOUND GO TO DONE1;

     DO UNTIL (SQLCODE ^= 0);
       EXEC SQL
         FETCH C1 INTO :RPT2.PROJNO, :RPT1.EMPNO, :RPT1.NAME,
         :RPT1.SALARY;
       PUT FILE(SYSPRINT)
       EDIT(RPT2.PROJNO,RPT1.EMPNO,RPT1.NAME,RPT1.SALARY)
       (SKIP,COL(1),A,COL(10),A,COL(20),A,COL(54),F(8,2));
     END;

     DONE1:
     EXEC SQL
       CLOSE C1;

   /* For all projects ending at a date later than 'raise_date'       */
   /* (i.e. those projects potentially affected by the salary raises) */
   /* generate a report containing the project number, project name   */
   /* the count of employees participating in the project and the     */
   /* total salary cost of the project.                               */

     /* Write out the header for Report 2 */
     PUT FILE(SYSPRINT) EDIT('ACCUMULATED STATISTICS BY NUM_PAID')
     (SKIP(3),COL(22),A);
     PUT FILE(SYSPRINT)
     EDIT('PROJECT','NUMBER OF','TOTAL')
     (SKIP(2),COL(1),A,COL(48),A,COL(63),A);
     PUT FILE(SYSPRINT)
     EDIT('NUM_PARK','PROJECT NAME','EMPLOYEES','COST')
     (SKIP,COL(1),A,COL(10),A,COL(48),A,COL(63),A,SKIP);

     BALANCE_MAX = BALANCE_MAX+1;
     EXEC SQL
       DECLARE C2 CURSOR FOR
       SELECT EP.PROJNO, PR.PROJNAME,
       COUNT(*),
       SUM((DAYS(EP.EMENDATE) - DAYS(EP.EMSTDATE)) * EP.EMPTIME *
       DECIMAL((EM.SALARY / :WORK_DAYS), 8, 2))
       FROM ADMINISTRATOR.EMPPROJACT EP, ADMINISTRATOR.PROJECT PR,
       ADMINISTRATOR.EMPLOYEE EM
       WHERE EP.PROJNO = PR.PROJNO
       AND EP.EMPNO = EM.EMPNO
       GROUP BY EP.PROJNO, PR.PROJNAME
       ORDER BY 3 DESC;
     EXEC SQL
       OPEN C2;

     /* Fetch and write the rows to SYSPRINT */
     EXEC SQL WHENEVER NOT FOUND GO TO DONE2;

     DO UNTIL (SQLCODE ^= 0);
       EXEC SQL
         FETCH C2 INTO :RPT2;
       PUT FILE(SYSPRINT)
       EDIT(RPT2.PROJNO,RPT2.PROJECT_NAME,EMPLOYEE_COUNT,
       TOTL_PROJ_COST)
       (SKIP,COL(1),A,COL(10),A,COL(50),F(4),COL(62),F(8,2));
     END;

     DONE2:
     EXEC SQL
       CLOSE C2;
     GO TO FINISHED;

   /* Error occurred while updating table. Inform user and rollback   */
   /* changes.                                                        */
     UPDATE_ERROR:
     EXEC SQL WHENEVER SQLERROR CONTINUE;
    PUT FILE(SYSPRINT) EDIT('*** ERROR Occurred while updating NUM_P2'||
     '  SQLCODE=',SQLCODE)(A,F(5));
     EXEC SQL
       ROLLBACK;
     GO TO FINISHED;

   /* Error occurred while generating reports.  Inform user and exit. */
     REPORT_ERROR:
     PUT FILE(SYSPRINT) EDIT('*** ERROR Occurred while generating '||
     'reports.  SQLCODE=',SQLCODE)(A,F(5));
     GO TO FINISHED;

     /* All done  */
     FINISHED:
     CLOSE FILE(SYSPRINT);
     RETURN;

   END PLIEX;


 PROGRAM_END:
 END PSAM1B;